{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactLIst/ContactList.module.scss","components/Filter/Filter.module.scss","components/ContactForm/ContactForm.js","components/ContactLIst/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handlerChange","e","value","currentTarget","className","s","form","preventDefault","label","input","type","pattern","title","required","onChange","autoComplete","button","ContactList","contacts","deleteContact","list","map","contact","item","onClick","id","Filter","filteredValue","App","setContacts","filterValue","setFilterValue","useEffect","parsedContacts","JSON","parse","localStorage","getItem","length","setItem","stringify","find","alert","prevContact","nanoid","filter","toLocaleLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bdbbd9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1lAqI\",\"button\":\"ContactForm_button__34NmM\",\"input\":\"ContactForm_input__eNHF4\",\"label\":\"ContactForm_label__dxg08\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__3S-UM\",\"item\":\"ContactList_item__tpmbA\",\"number\":\"ContactList_number__2Bxsq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2imQs\",\"input\":\"Filter_input__25v2L\"};","import React from \"react\";\r\nimport { useState} from \"react\";\r\nimport s from './ContactForm.module.scss';\r\n\r\n\r\nfunction ContactForm({onSubmit}) {\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n \r\n\r\n    const handlerChange = e => {\r\n        const { value } = e.currentTarget;\r\n        switch (e.currentTarget.name) {\r\n            case 'name': setName(value);\r\n                break\r\n            case 'number': setNumber(value);\r\n                break;\r\n            default: return;\r\n        }\r\n           \r\n        \r\n\r\n        \r\n    };\r\n\r\n   const  reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    const handlerSubmit = e => {\r\n        e.preventDefault();\r\n      \r\n\r\n        onSubmit(name, number);\r\n\r\n        reset();\r\n    }\r\n\r\n        return (\r\n            <form className={s.form} onSubmit={handlerSubmit}>\r\n                <label className={s.label}>\r\n                    Name\r\n                    <input\r\n                        className={s.input}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        value={name}\r\n                        onChange={handlerChange}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </label>\r\n                <label className={s.label}>\r\n                    Number\r\n                    <input\r\n                        className={s.input}\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        value={number}\r\n                        onChange={handlerChange}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </label>\r\n                <button type='submit' className={s.button}>Add contact</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport default ContactForm;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from './ContactList.module.scss'\r\n\r\n\r\nfunction ContactList({contacts, deleteContact}) {\r\n    return (\r\n        <ul className={s.list}>\r\n            {contacts.map(contact => <li className={s.item} key={contact.id}><span className={s.name}>{contact.name}</span>:<span className={s.number}>{contact.number}</span> \r\n            <button className={s.button} type='button' onClick={() => deleteContact(contact.id)}>Delete</button></li>)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    deleteContact: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ContactList;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from './Filter.module.scss'\r\n\r\n\r\nexport default function Filter({onChange}) {\r\n  \r\n\r\n    const handlerChange = e => {\r\n        const filteredValue = e.currentTarget.value;\r\n        onChange(filteredValue);\r\n    }\r\n    \r\n    return (\r\n        <label className={s.label}>\r\n            Find contact by name\r\n            <input className={s.input} type=\"text\" autoComplete=\"off\"\r\n                onChange={handlerChange} />\r\n        </label>\r\n    \r\n    )\r\n    \r\n}\r\n\r\nFilter.propTypes = {\r\n   handlerChange: PropTypes.func\r\n}\r\n","import \"./App.css\";\nimport { useState, useEffect } from 'react'\nimport ContactForm from \"./components/ContactForm\";\nimport { nanoid } from \"nanoid\";\nimport ContactList from \"./components/ContactLIst\";\nimport Filter from \"./components/Filter\";\n\nfunction App () {\n \n  const [contacts, setContacts] = useState([]);\n  const [filterValue, setFilterValue] = useState('');\n\n  \n  const formSubmitHandler = ( name, number ) => {\n    if (contacts.find(contact => contact.name === name)) {\n      alert( name + 'is already in contacts' )\n      return;\n    }\n  \n    setContacts(prevContact => [{\n        name,\n        number,\n        id: nanoid()\n    },\n      ...prevContact\n    ]\n\n    )\n    \n  };\n\n  const changeFilter = (filteredValue) => {\n    setFilterValue(filteredValue);\n  }\n\n  const getFilteredContactList = () => {\n            return contacts.filter(\n      contact => contact.name.toLocaleLowerCase()\n        .includes(filterValue.toLocaleLowerCase())\n    )\n    \n  }\n\n  const deleteContact = (id) => {\n    setContacts(contacts.filter(contact => contact.id !== id))\n      \n  }\n\n  useEffect(() => {\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'))\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n    \n  }, [])\n\n  useEffect(() => {\n  \n    if (contacts.length !== 0) {\n      localStorage.setItem('contacts', JSON.stringify(contacts))\n    }\n      \n  }, [contacts])\n\n    return (\n      <div className='container'>\n        <h1>PhoneBook</h1>\n        <ContactForm onSubmit={formSubmitHandler} />\n        <h1>Contacts</h1>\n        <Filter onChange={changeFilter}/>\n        <ContactList contacts={getFilteredContactList()} deleteContact={deleteContact}/>\n      </div>\n    ) \n  };\n\n\nexport default App;\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}